// ÂØºÂÖ•ÂøÖË¶ÅÁöÑÊ®°Âùó
const express = require('express');     // Web Â∫îÁî®Ê°ÜÊû∂
const mongoose = require('mongoose');    // MongoDB Êï∞ÊçÆÂ∫ìÂ∑•ÂÖ∑
const cors = require('cors');           // Ë∑®ÂüüËµÑÊ∫êÂÖ±‰∫´‰∏≠Èó¥‰ª∂
const assetsRouter = require('./routes/assets');  // ÂØºÂÖ•ËµÑÊ∫êË∑ØÁî±Â§ÑÁêÜÂô®
const initRouter = require('./routes/init');

// ÂàõÂª∫ Express Â∫îÁî®ÂÆû‰æã
const app = express();

// ÈÖçÁΩÆ‰∏≠Èó¥‰ª∂
app.use(cors());           // ÂêØÁî® CORSÔºåÂÖÅËÆ∏Ë∑®ÂüüËØ∑Ê±Ç
app.use(express.json());   // Ëß£Êûê JSON Ê†ºÂºèÁöÑËØ∑Ê±Ç‰Ωì

// ËøûÊé• MongoDB Êï∞ÊçÆÂ∫ì
mongoose.connect('mongodb://localhost:27017/gallery')
  .then(() => console.log('‚úÖ MongoDB connected successfully'))
  .catch(err => console.log('‚ùå MongoDB connection error:', err));

// ÁõëÂê¨Êï∞ÊçÆÂ∫ìËøûÊé•‰∫ã‰ª∂
mongoose.connection.on('connected', () => {
  console.log('üü¢ Mongoose connected to MongoDB');
});

mongoose.connection.on('error', (err) => {
  console.log('üî¥ Mongoose connection error:', err);
});

mongoose.connection.on('disconnected', () => {
  console.log('üü° Mongoose disconnected');
});

// ËÆæÁΩÆË∑ØÁî±
app.use('/api/assets', assetsRouter);  // ÊâÄÊúâ /api/assets ÁöÑËØ∑Ê±ÇÈÉΩ‰∫§Áªô assetsRouter Â§ÑÁêÜ

// Ê∑ªÂä†ÂàùÂßãÂåñË∑ØÁî±ÔºàÂª∫ËÆÆÊ∑ªÂä†ÊùÉÈôêÊéßÂà∂Ôºâ
app.use('/api/init', initRouter);

// Ê∑ªÂä†ÊµãËØïË∑ØÁî±ÔºàÂèØÈÄâÔºåÁî®‰∫éÊ£ÄÊü•ÊúçÂä°Âô®Áä∂ÊÄÅÔºâ
app.get('/api/test', (req, res) => {
  res.json({ 
    message: 'Backend is working!',
    mongoStatus: mongoose.connection.readyState // 0: disconnected, 1: connected, 2: connecting, 3: disconnecting
  });
});

// Ê∑ªÂä†Êï∞ÊçÆÂ∫ìÁä∂ÊÄÅÊ£ÄÊü•Ë∑ØÁî±
app.get('/api/status', (req, res) => {
  res.json({
    server: 'running',
    mongodb: {
      status: mongoose.connection.readyState,
      statusText: ['disconnected', 'connected', 'connecting', 'disconnecting'][mongoose.connection.readyState]
    }
  });
});

// ÈîôËØØÂ§ÑÁêÜ‰∏≠Èó¥‰ª∂
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ message: err.message });
});

// ËÆæÁΩÆÊúçÂä°Âô®Á´ØÂè£
const PORT = process.env.PORT || 5000;

// ÂêØÂä®ÊúçÂä°Âô®
app.listen(PORT, (error) => {
  if (error) {
    console.error('‚ùå Error starting server:', error);
    return;
  }
  console.log(`üöÄ Server running on port ${PORT}`);
}).on('error', (error) => {
  if (error.code === 'EADDRINUSE') {
    console.error(`‚ùå Port ${PORT} is already in use. Please try a different port.`);
  } else {
    console.error('‚ùå Server error:', error);
  }
});